@inject Operations _operations

@if (editMode && lecture.Status == LectureStatus.Accepted)
{
    <div class="card">
        <div class="card-header">
            @(lecture.Department ?? "Open to all")
            <button class="btn btn-outline-primary btn-sm" @onclick="ToggleEdit">Display</button>
        </div>
        <div class="card-body">
            <EditForm Model="@editLecture" OnValidSubmit="Submit" FormName="editLecture">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="title">Title:</label>
                    <InputText class="form-control" @bind-Value="editLecture!.Title" />
                </div>
                <div class="form-group">
                    <label for="topic">Topic:</label>
                    <InputText class="form-control" @bind-Value="editLecture!.Topic" />
                </div>
                <div class="form-group">
                    <label for="summary">Summary:</label>
                    <InputTextArea class="form-control" @bind-Value="editLecture!.Summary" />
                </div>
                <div class="form-group">
                    <label for="time">Time:</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" class="form-control" @bind-Value="editLecture!.HeldAt" />
                </div>
                <div class="form-group">
                    <button class="btn btn-primary" type="submit">Submit</button>
                </div>
            </EditForm>
        </div>
        <div class="card-footer">

        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            @(lecture.Department ?? "Open to all")
            @if(isAdminOrHomeView && (user!.IsAdmin || lecture.HeldBy.Contains(user)))
            {
                <button class="btn btn-outline-primary btn-sm" @onclick="ToggleEdit">Edit</button>
            }
        </div>
        <div class="card-body">
            @if (lecture.Title == "")
            {
                <h5 class="card-title">No Title set</h5>
            }
            else
            {
                <h5 class="card-title">@(lecture.Title ?? "Missing title")</h5>
            }
            @if(lecture.HeldAt != null)
            {
                <p class="card-subtitle"><small>@(lecture.HeldAt)</small></p>
            }
            else
            {
                <p class="card-subtitle"><small>No time set yet</small></p>
            }
            <p class="card-text">Topic: @(lecture.Topic ?? "Missing topic")</p>
            <p class="card-text">Summary: @(lecture.Summary ?? "Missing Summary")</p>
            <p class="card-text">
                Registerred Presenters:
                @foreach (var user in lecture.HeldBy)
                {
                    @user.Email
                }
            </p>
        </div>
        <div class="card-footer">
            Tags:
            @if(lecture.Tags.Count() == 0)
            {
                <p>No tags have been set yet</p>
            }
            else
            {
                @foreach (var tag in lecture.Tags)
                {
                    @tag
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public User? user { get; set; }
    [Parameter]
    public required Lecture lecture { get; set; }
    [Parameter]
    public bool isAdminOrHomeView { get; set; }

    [SupplyParameterFromForm]
    public required Lecture editLecture { get; set; }
    private bool editMode { get; set; } = false;

    private void ToggleEdit()
    {
        if (editMode)
            editMode = false;
        else
            editMode = true;
        editLecture = lecture;
    }

    public async Task Submit()
    {
        lecture = await _operations.UpdateLecture(editLecture);
        editMode = false;
        StateHasChanged();
    }
}
