@rendermode InteractiveServer

<div>
    @if(weekDates != null)
    {
        <table class="table table-bordered">
            @foreach (var date in weekDates)
            {
                <tr>
                    <td>@($"{date.DayOfWeek} {date.Date.ToShortDateString()}")</td>
                    <td>
                        @{var lecture = IsTaken(date);}
                        @if (lecture != null)
                        {
                            <p>@($"{lecture.Title} {lecture.HeldAt!.Value.Date.ToShortDateString()}")</p>
                        }
                        else
                        {
                            <p>Available</p>
                        }
                    </td>
                </tr>
            }
        </table>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    <div class="btn-group">
        <button class="btn btn-primary" @onclick="PreviousWeek">Previous</button>
        <button class="btn btn-primary" @onclick="ResetWeek">Reset</button>
        <button class="btn btn-primary" @onclick="NextWeek">Next</button>
    </div>
</div>

@code {
    [Parameter]
    public List<Lecture>? lectures { get; set; }

    private DateTimeOffset currentDate { get; set; }
    private List<DateTimeOffset>? weekDates { get; set; }

    protected override Task OnInitializedAsync()
    {
        currentDate = DateTimeOffset.Now;
        weekDates = GetWeeklyDates(currentDate);
        return base.OnInitializedAsync();
    }

    private List<DateTimeOffset> GetWeeklyDates(DateTimeOffset baseDate)
    {
        DateTimeOffset startOfWeek = baseDate.AddDays(-(int)baseDate.DayOfWeek + 1);
        List<DateTimeOffset> weekDates = new List<DateTimeOffset>();

        for (int i = 0; i < 7; i++)
        {
            weekDates.Add(startOfWeek.AddDays(i));
        }

        return weekDates;
    }

    private Lecture? IsTaken(DateTimeOffset date)
    {
        if(lectures != null)
        {
            foreach(var lecture in lectures)
            {
                if (lecture.HeldAt != null && lecture.HeldAt.Value.Date == date.Date)
                    return lecture;
            }
        }
        return null;
    }

    private void NextWeek()
    {
        currentDate = currentDate.AddDays((int)7);
        weekDates = GetWeeklyDates(currentDate);
        StateHasChanged();
    }

    private void PreviousWeek()
    {
        currentDate = currentDate.AddDays(-(int)7);
        weekDates = GetWeeklyDates(currentDate);
        StateHasChanged();
    }

    private void ResetWeek()
    {
        currentDate = DateTimeOffset.Now;
        weekDates = GetWeeklyDates(currentDate);
        StateHasChanged();
    }
}
