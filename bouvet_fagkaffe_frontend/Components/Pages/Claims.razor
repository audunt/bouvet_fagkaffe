@using System.Security.Claims
@inject UserHelper _userHelper
@inject IHttpContextAccessor httpContextAccessor
@inject AuthenticationStateProvider authenticationStateProvider
@page "/claims"
@{
    //var user = httpContextAccessor.HttpContext?.User;
}

<PageTitle>Claims</PageTitle>

Welcome to fagkaffe @userObject?.FullName()
<h1>Claims from user object:</h1>
<br />
<div>
    Email: @userObject?.Email <br />
    @if (userObject?.Groups != null)
    {
        @foreach (var group in userObject.Groups)
        {
            <text>
                Group: @group
            </text>
            <br />
        }
    }
    <br />
    isAdmin: @userObject?.IsAdmin
</div>
<br />
<br />
<h1>Claims from principal:</h1>

@if(user != null){
    @foreach (var claim in user?.Claims ?? [])
    {
        <text>
            Key: @claim.Type <br />
            Value: @claim.Value
            <br />
            <br />
        </text>
    }

}
else
{
    <p>@message</p>
}

@code
{
    private ClaimsPrincipal? user { get; set; }
    private User? userObject { get; set; }
    private string? message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider
            .GetAuthenticationStateAsync();
        if (authState == null)
            message = "authState is null";
        else if (authState.User == null)
            message = "User is null";
        else
            user = authState.User;
            userObject = await _userHelper.GetUser(authState!.User);
    }
}